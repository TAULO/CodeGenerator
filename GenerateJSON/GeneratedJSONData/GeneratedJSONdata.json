{"batch":{"application":[{"id":"appID 0","name":"appName 0","descriptive":{"appVersion":"","executablepathcontains":"","framecontains":"","icon":"","jvmlocation":"","launchwith":"","manufacturer":"","md5":"","openIn":"","processcontains":"","titlebarcontains":"","type":"","urlcontains":"","version":""}},{"id":"e44473c7-4bc0-499b-9ba6-3124fe0f8902","name":"App Name 1","descriptive":{"appVersion":"","executablepathcontains":"","framecontains":"","icon":"","jvmlocation":"","launchwith":"","manufacturer":"","md5":"","openIn":"","processcontains":"","titlebarcontains":"","type":"","urlcontains":"","version":""}}],"manufacturer":[],"field":[{"id":"fieldID 0","name":"fieldName 0","descriptive":{"id":"","name":"","actions":["",""],"application":"","image":"","offset":{},"path":"","variablename":"","version":""}},{"id":"04b54f12-d251-4f55-bb87-077a870a7cdc","name":"Field Name 1","descriptive":{"id":"","name":"","actions":["",""],"application":"","image":"","offset":{},"path":"","variablename":"","version":""}}],"table":[{"id":"tableID 0","name":"tableName 0","descriptive":{"csv":"","name":"tableName 0"}},{"id":"87a88ecc-bb67-47ec-91f1-678b44399c2d","name":"Table Name 1","descriptive":{"csv":"\"group\",\"description\",\"function\",\"msg\"\r\n\"Dankost\",\"Dankost bruger skal være i AD\",\"if(hasDankostUser(value)){ value.dankostdata[\"\"sAMAccountName\"\"]==value.addata[\"\"sAMAccountName\"\"]} else true\",\"'Dankost bruger '+value.dankostdata[\"\"sAMAccountName\"\"]+' findes ikke i AD'\"\r\n\"Dankost\",\"Dankost brugere skal være i lønsystemet\",\"if(hasDankostUser(value)){value.addata[\"\"RSDCPRnr\"\"]==removeDash(value.londata[\"\"CPR-nummer\"\"])}else true\",\"'Dankost bruger med cpr:'+value.addata[\"\"RSDCPRnr\"\"]+' findes ikke i løn systemet ' \"\r\n\"Auditbase\",\"Auditbase brugere skal have samme navn som i AD\",\"if(hasAuditbaseUser(value) && hasAdUser(value)){value.auditbasedata[\"\"NAME\"\"]==value.addata[\"\"name\"\"]} else true\",\"'Auditbase bruger ' +value.auditbasedata[\"\"NAME\"\"]+ ' hedder ' + value.addata[\"\"name\"\"] +' i AD' \"\r\n\"Auditbase\",\"Auditbase brugere fra SHS skal være i AD\",\"if(hasAuditbaseUser(value) && value.auditbasedata[\"\"LOCATION\"\"]=='SHS'){ value.auditbasedata[\"\"LOGIN\"\"]==value.addata[\"\"sAMAccountName\"\"]} else true\",\"'Auditbase bruger '+value.auditbasedata[\"\"LOGIN\"\"]+' fra SHS findes ikke i AD'\"\r\n\"Auditbase\",\"Auditbase brugere skal have samme title som i AD\",\"if(hasAuditbaseUser(value) && hasAdUser(value)){mapADTitleToAuditbaseTitle(value.addata[\"\"title\"\"])==value.auditbasedata[\"\"TITLE\"\"]}else true\",\"'Auditbase bruger er ' +value.auditbasedata[\"\"TITLE\"\"]+ ' i Auditbase. Det var forventet at denne var '+ mapADTitleToAuditbaseTitle(value.addata[\"\"title\"\"])+''\"\r\n\"Auditbase\",\"Auditbase brugere skal have samme lokation som i AD\",\"if(hasAdUser(value) && hasAuditbaseUser(value) && value.addata[\"\"department\"\"]!==\"\"\"\"){value.auditbasedata[\"\"LOCATION\"\"]==mapADDepartmentToAuditbaseLocation(value.addata[\"\"department\"\"])}else true\",\"'Auditbase bruger er på lokation ' +value.auditbasedata[\"\"LOCATION\"\"]+ ' i Auditbase. Det var forventet at denne skulle være på '+mapADDepartmentToAuditbaseLocation(value.addata[\"\"department\"\"])\"\r\n\"AD\",\"AD brugere skal være i lønsystemet\",\"if(hasAdUser(value)){value.addata[\"\"RSDCPRnr\"\"]==removeDash(value.londata[\"\"CPR-nummer\"\"])}else true\",\"'AD bruger med cpr:'+value.addata[\"\"RSDCPRnr\"\"]+' findes ikke i løn systemet ' \"\r\n\"AD\",\"AD brugere skal have været aktiv inden for de sidste 90 dage\",\"if(hasAdUser(value)){ daysSince(value.addata[\"\"LastLogonDate\"\"]) < 90}else true\",\"'AD bruger har ikke været aktiv inden for de sidste 90 dage. Sidste logon var '+value.addata[\"\"LastLogonDate\"\"] + ' hvilket er ' + daysSince(value.addata[\"\"LastLogonDate\"\"]) + ' dage siden'\"\r\n\"AD\",\"Der må kun være en AD bruger pr. personnel i lønsystemet\",\"value.addata2[\"\"sAMAccountName\"\"]==''\",\"'AD bruger med cpr:'+value.addata[\"\"RSDCPRnr\"\"]+' har to AD brugere : '+ value.addata[\"\"sAMAccountName\"\"] +' og ' + value.addata2[\"\"sAMAccountName\"\"]\"\r\n\"AD\",\"AD brugere skal have samme navn som i lønsystemet\",\"if(hasAdUser(value) && hasLonUser(value)){value.addata[\"\"name\"\"]==value.londata[\"\"Navn (for-/efternavn)\"\"]} else true\",\"'AD bruger ' +value.addata[\"\"name\"\"]+ ' hedder ' + value.londata[\"\"Navn (for-/efternavn)\"\"] +' i løn systemet ' \"\r\n\"AD\",\"AD brugere skal have samme for- og efternavn som i lønsystemet\",\"if(hasAdUser(value) && hasLonUser(value)){sammeForogEfternavn(value.addata[\"\"name\"\"],value.londata[\"\"Navn (for-/efternavn)\"\"])} else true\",\"'AD bruger ' +value.addata[\"\"name\"\"]+ ' hedder ' + value.londata[\"\"Navn (for-/efternavn)\"\"] +' i løn systemet ' \"\r\n\"AD\",\"AD brugere skal have samme title som i lønsystemet\",\"if(hasAdUser(value) && hasLonUser(value)){value.addata[\"\"title\"\"]==mapLonStillingToAdTitle(value.londata[\"\"Stilling\"\"])} else true\",\"'AD bruger er ' +value.addata[\"\"title\"\"]+ ' i AD og har stilling ' + value.londata[\"\"Stilling\"\"] +' i løn systemet der mapper til '+mapLonStillingToAdTitle(value.londata[\"\"Stilling\"\"])\"\r\n\"AD\",\"AD brugere skal have en department eller division\",\"if(hasAdUser(value)){value.addata[\"\"department\"\"]!==\"\"\"\" || value.addata[\"\"division\"\"]!==\"\"\"\"}else true\",\"'AD bruger har ingen organisation (department eller division) i AD' \"\r\n\"AD\",\"AD brugere der har en department skal have samme organisation som i lønsystemet\",\"if(hasAdUser(value) && hasLonUser(value) && value.addata[\"\"department\"\"]!==\"\"\"\"){value.addata[\"\"department\"\"]==mapLonAfdToADDepartment(value.londata[\"\"Afdelings-niveau\"\"])}else true\",\"'AD bruger er på department ' +value.addata[\"\"department\"\"]+ ' i AD og på Afdelings-niveau '+ value.londata[\"\"Afdelings-niveau\"\"] +' i løn systemet der mapper til '+mapLonAfdToADDepartment(value.londata[\"\"Afdelings-niveau\"\"]) \"\r\n\"AD\",\"AD brugere der har en division skal have samme organisation som i lønsystemet\",\"if(hasAdUser(value) && hasLonUser(value) && value.addata[\"\"division\"\"]!==\"\"\"\"){value.addata[\"\"division\"\"]==mapLonAfdToADDivision(value.londata[\"\"Afdelings-niveau\"\"])}else true\",\"'AD bruger er på division ' +value.addata[\"\"division\"\"]+ ' i AD og på Afdelings-niveau '+ value.londata[\"\"Afdelings-niveau\"\"] +' i løn systemet der mapper til '+mapLonAfdToADDivision(value.londata[\"\"Afdelings-niveau\"\"]) \"\r\n\"Cetrea\",\"Cetrea brugere skal være i AD\",\"if(hasCetreaUser(value)){ value.cetreadata[\"\"Brugernavn\"\"]==value.addata[\"\"sAMAccountName\"\"]} else true\",\"'Cetrea bruger '+value.cetreadata[\"\"Brugernavn\"\"]+' findes ikke i AD'\"\r\n\"Cetrea\",\"Cetrea brugere skal have samme navn som i AD\",\"if(hasCetreaUser(value) && hasAdUser(value)){value.cetreadata[\"\"Navn\"\"]==value.addata[\"\"name\"\"]} else true\",\"'Cetrea bruger ' +value.cetreadata[\"\"Navn\"\"]+ ' hedder ' + value.addata[\"\"name\"\"] +' i AD' \"\r\n\"Cetrea\",\"Cetrea brugere skal have samme profession som i AD\",\"if(hasCetreaUser(value) && hasAdUser(value)){mapCetreaProfessionToADTitle(value.cetreadata[\"\"Profession\"\"])==value.addata[\"\"title\"\"]}else true\",\"'Cetrea bruger er ' +value.cetreadata[\"\"Profession\"\"]+ ' i Cetrea. Det var forventet at denne var '+ mapCetreaProfessionToADTitle(value.cetreadata[\"\"Profession\"\"])+' i AD, men er ' + value.addata[\"\"title\"\"] +'' \"\r\n\"Cetrea\",\"Cetrea brugere skal have samme primære organisation som i AD\",\"if(hasAdUser(value) && hasCetreaUser(value) && value.addata[\"\"department\"\"]!==\"\"\"\"){value.cetreadata[\"\"PrimærOrganisation\"\"]==mapADDepartmentToCetreaOrg(value.addata[\"\"department\"\"])}else true\",\"'Cetrea bruger er på PrimærOrganisation ' +value.cetreadata[\"\"PrimærOrganisation\"\"]+ ' i Cetrea og har AD department '+value.addata[\"\"department\"\"]+ ' i AD systemet der mapper til '+mapADDepartmentToCetreaOrg(value.addata[\"\"department\"\"])\"\r\n\"Cetrea\",\"Cetrea brugere skal have de rigtige rettigheder\",\"if(hasCetreaUser(value)){validateExpectedCetreaOrgs(value.cetreadata[\"\"Profession\"\"],value.cetreadata[\"\"PrimærOrganisation\"\"],value.cetreadata[\"\"Organisationer\"\"])}else true\",\"'Cetrea bruger har ikke de forventede adgange. Tildelte adgange er: ' +value.cetreadata[\"\"Organisationer\"\"]+ '. De forventede adgange var: '+getExpectedCetreaOrgs(value.cetreadata[\"\"Profession\"\"],value.cetreadata[\"\"PrimærOrganisation\"\"])+''\"","name":"Table Name 1"}}],"flow":[{"id":"flowID 0","name":"flowName 0","descriptive":{"id":"","name":"","inputs":[],"outputs":[],"application":"","code":"","blocklyXml":"","type":"","typeConfig":{"subjectPrefix":"","triggers":{"context":[],"external":[{"configuration":{"keys":[""],"modifiers":["",""]},"externalType":""}],"lifecycle":[],"services":[]}},"anchors":[],"usesfields":[],"usesFlows":[],"usesTables":[],"compatibleVersion":"","hideFromUser":false,"precompile":false,"restoreFocus":false,"isMandatory":false,"autocompleteSnippets":false,"autocompleteTypes":false,"debuggerEnabled":false,"hideInFlowLaunchMenu":false,"icon":"","version":""}},{"id":"39b93d99-271a-420d-a9db-fb0e1257f719","name":"Flow Name 1","descriptive":{"id":"","name":"","inputs":[],"outputs":[],"application":"","code":"/**\n * @module IO\n * @submodule Input\n * @for p5\n * @requires core\n * @requires reqwest\n */\n\n'use strict';\n\nvar p5 = require('../core/core');\nvar reqwest = require('reqwest');\nvar opentype = require('opentype.js');\nrequire('../core/error_helpers');\n\n\n/**\n * Loads an opentype font file (.otf, .ttf) from a file or a URL,\n * and returns a PFont Object. This method is asynchronous,\n * meaning it may not finish before the next line in your sketch\n * is executed.\n *\n * @method loadFont\n * @param  {String}        path       name of the file or url to load\n * @param  {Function}      [callback] function to be executed after\n *                                    loadFont()\n *                                    completes\n * @return {Object}                   p5.Font object\n * @example\n *\n * <p>Calling loadFont() inside preload() guarantees that the load\n * operation will have completed before setup() and draw() are called.</p>\n *\n * <div><code>\n * var myFont;\n * function preload() {\n *   myFont = loadFont('assets/AvenirNextLTPro-Demi.otf');\n * }\n *\n * function setup() {\n *   fill('#ED225D');\n *   textFont(myFont);\n *   textSize(36);\n *   text('p5*js', 10, 50);\n * }\n * </code></div>\n *\n * <p>Outside preload(), you may supply a callback function to handle the\n * object:</p>\n *\n * <div><code>\n * function setup() {\n *   loadFont('assets/AvenirNextLTPro-Demi.otf', drawText);\n * }\n *\n * function drawText(font) {\n *   fill('#ED225D');\n *   textFont(font, 36);\n *   text('p5*js', 10, 50);\n * }\n *\n * </code></div>\n *\n */\np5.prototype.loadFont = function(path, onSuccess, onError) {\n\n  var p5Font = new p5.Font(this);\n\n  opentype.load(path, function(err, font) {\n\n    if (err) {\n\n      if (typeof onError !== 'undefined') {\n        return onError(err);\n      }\n      throw err;\n    }\n\n    p5Font.font = font;\n\n    if (typeof onSuccess !== 'undefined') {\n      onSuccess(p5Font);\n    }\n  });\n\n  return p5Font;\n};\n\n\n//BufferedReader\np5.prototype.createInput = function() {\n  // TODO\n  throw 'not yet implemented';\n};\n\np5.prototype.createReader = function() {\n  // TODO\n  throw 'not yet implemented';\n};\n\np5.prototype.loadBytes = function() {\n  // TODO\n  throw 'not yet implemented';\n};\n\n/**\n * Loads a JSON file from a file or a URL, and returns an Object or Array.\n * This method is asynchronous, meaning it may not finish before the next\n * line in your sketch is executed.\n *\n * @method loadJSON\n * @param  {String}        path       name of the file or url to load\n * @param  {Function}      [callback] function to be executed after\n *                                    loadJSON()\n *                                    completes, Array is passed in as first\n *                                    argument\n * @param  {String}        [datatype] \"json\" or \"jsonp\"\n * @return {Object|Array}             JSON data\n * @example\n *\n * <p>Calling loadJSON() inside preload() guarantees to complete the\n * operation before setup() and draw() are called.</p>\n *\n * <div><code>\n * var weather;\n * function preload() {\n *   var url = 'http://api.openweathermap.org/data/2.5/weather?q=London,UK';\n *   weather = loadJSON(url);\n * }\n *\n * function setup() {\n *   noLoop();\n * }\n *\n * function draw() {\n *   background(200);\n *   // get the humidity value out of the loaded JSON\n *   var humidity = weather.main.humidity;\n *   fill(0, humidity); // use the humidity value to set the alpha\n *   ellipse(width/2, height/2, 50, 50);\n * }\n * </code></div>\n *\n * <p>Outside preload(), you may supply a callback function to handle the\n * object:</p>\n\n * <div><code>\n * function setup() {\n *   noLoop();\n *   var url = 'http://api.openweathermap.org/data/2.5/weather?q=NewYork,USA';\n *   loadJSON(url, drawWeather);\n * }\n *\n * function draw() {\n *   background(200);\n * }\n *\n * function drawWeather(weather) {\n *   // get the humidity value out of the loaded JSON\n *   var humidity = weather.main.humidity;\n *   fill(0, humidity); // use the humidity value to set the alpha\n *   ellipse(width/2, height/2, 50, 50);\n * }\n * </code></div>\n *\n */\np5.prototype.loadJSON = function() {\n  var path = arguments[0];\n  var callback = arguments[1];\n  var ret = []; // array needed for preload\n  // assume jsonp for URLs\n  var t = 'json'; //= path.indexOf('http') === -1 ? 'json' : 'jsonp';\n\n  // check for explicit data type argument\n  if (typeof arguments[2] === 'string'){\n    if (arguments[2] === 'jsonp' || arguments[2] === 'json') {\n      t = arguments[2];\n    }\n  }\n\n  reqwest({url: path, type: t, crossOrigin: true})\n    .then(function(resp) {\n      for (var k in resp) {\n        ret[k] = resp[k];\n      }\n      if (typeof callback !== 'undefined') {\n        callback(resp);\n      }\n    });\n  return ret;\n};\n\n/**\n * Reads the contents of a file and creates a String array of its individual\n * lines. If the name of the file is used as the parameter, as in the above\n * example, the file must be located in the sketch directory/folder.\n *\n * Alternatively, the file maybe be loaded from anywhere on the local\n * computer using an absolute path (something that starts with / on Unix and\n * Linux, or a drive letter on Windows), or the filename parameter can be a\n * URL for a file found on a network.\n *\n * This method is asynchronous, meaning it may not finish before the next\n * line in your sketch is executed.\n *\n * @method loadStrings\n * @param  {String}   filename   name of the file or url to load\n * @param  {Function} [callback] function to be executed after loadStrings()\n *                               completes, Array is passed in as first\n *                               argument\n * @return {Array}               Array of Strings\n * @example\n *\n * <p>Calling loadStrings() inside preload() guarantees to complete the\n * operation before setup() and draw() are called.</p>\n *\n * <div><code>\n * var result;\n * function preload() {\n *   result = loadStrings('assets/test.txt');\n * }\n\n * function setup() {\n *   background(200);\n *   var ind = floor(random(result.length));\n *   text(result[ind], 10, 10, 80, 80);\n * }\n * </code></div>\n *\n * <p>Outside preload(), you may supply a callback function to handle the\n * object:</p>\n *\n * <div><code>\n * function setup() {\n *   loadStrings('assets/test.txt', pickString);\n * }\n *\n * function pickString(result) {\n *   background(200);\n *   var ind = floor(random(result.length));\n *   text(result[ind], 10, 10, 80, 80);\n * }\n * </code></div>\n */\np5.prototype.loadStrings = function (path, callback) {\n  var ret = [];\n  var req = new XMLHttpRequest();\n  req.open('GET', path, true);\n  req.onreadystatechange = function () {\n    if (req.readyState === 4 && (req.status === 200 )) {\n      var arr = req.responseText.match(/[^\\r\\n]+/g);\n      for (var k in arr) {\n        ret[k] = arr[k];\n      }\n      if (typeof callback !== 'undefined') {\n        callback(ret);\n      }\n    }\n    else{\n      p5._friendlyFileLoadError(3,path);\n    }\n  };\n  req.send(null);\n  return ret;\n};\n\n/**\n * <p>Reads the contents of a file or URL and creates a p5.Table object with\n * its values. If a file is specified, it must be located in the sketch's\n * \"data\" folder. The filename parameter can also be a URL to a file found\n * online. By default, the file is assumed to be comma-separated (in CSV\n * format). Table only looks for a header row if the 'header' option is\n * included.</p>\n *\n * <p>Possible options include:\n * <ul>\n * <li>csv - parse the table as comma-separated values</li>\n * <li>tsv - parse the table as tab-separated values</li>\n * <li>header - this table has a header (title) row</li>\n * </ul>\n * </p>\n *\n * <p>When passing in multiple options, pass them in as separate parameters,\n * seperated by commas. For example:\n * <br><br>\n * <code>\n *   loadTable(\"my_csv_file.csv\", \"csv\", \"header\")\n * </code>\n * </p>\n *\n * <p> All files loaded and saved use UTF-8 encoding.</p>\n *\n * <p>This method is asynchronous, meaning it may not finish before the next\n * line in your sketch is executed. Calling loadTable() inside preload()\n * guarantees to complete the operation before setup() and draw() are called.\n * Outside preload(), you may supply a callback function to handle the object.\n * </p>\n *\n * @method loadTable\n * @param  {String}         filename   name of the file or URL to load\n * @param  {String|Strings} [options]  \"header\" \"csv\" \"tsv\"\n * @param  {Function}       [callback] function to be executed after\n *                                     loadTable() completes, Table object is\n *                                     passed in as first argument\n * @return {Object}                    Table object containing data\n *\n * @example\n\t* <div class=\"norender\">\n\t* <code>\n\t* // Given the following CSV file called \"mammals.csv\"\n * // located in the project's \"assets\" folder:\n * //\n\t* // id,species,name\n\t* // 0,Capra hircus,Goat\n\t* // 1,Panthera pardus,Leopard\n\t* // 2,Equus zebra,Zebra\n\t*\n\t* var table;\n\t*\n\t* function preload() {\n\t*   //my table is comma separated value \"csv\"\n\t*   //and has a header specifying the columns labels\n\t*   table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n\t*   //the file can be remote\n\t*   //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n\t*   //                  \"csv\", \"header\");\n\t* }\n\t*\n\t* function setup() {\n\t*   //count the columns\n\t*   print(table.getRowCount() + \" total rows in table\");\n\t*   print(table.getColumnCount() + \" total columns in table\");\n\t*\n\t*   print(table.getColumn(\"name\"));\n\t*   //[\"Goat\", \"Leopard\", \"Zebra\"]\n\t*\n\t*   //cycle through the table\n\t*   for (var r = 0; r < table.getRowCount(); r++)\n\t*     for (var c = 0; c < table.getColumnCount(); c++) {\n\t*       print(table.getString(r, c));\n\t*     }\n\t* }\n\t* </code>\n\t* </div>\n */\np5.prototype.loadTable = function (path) {\n  var callback = null;\n  var options = [];\n  var header = false;\n  var sep = ',';\n  var separatorSet = false;\n  for (var i = 1; i < arguments.length; i++) {\n    if (typeof(arguments[i]) === 'function' ){\n      callback = arguments[i];\n    }\n    else if (typeof(arguments[i]) === 'string') {\n      options.push(arguments[i]);\n      if (arguments[i] === 'header') {\n        header = true;\n      }\n      if (arguments[i] === 'csv') {\n        if (separatorSet) {\n          throw new Error('Cannot set multiple separator types.');\n        }\n        else {\n          sep = ',';\n          separatorSet = true;\n        }\n      }\n      else if (arguments[i] === 'tsv') {\n        if (separatorSet) {\n          throw new Error('Cannot set multiple separator types.');\n        }\n        else {\n          sep = '\\t';\n          separatorSet = true;\n        }\n      }\n    }\n  }\n\n  var t = new p5.Table();\n  reqwest({url: path, crossOrigin: true, type: 'csv'})\n    .then(function(resp) {\n      resp = resp.responseText;\n\n      var state = {};\n\n      // define constants\n      var PRE_TOKEN = 0,\n          MID_TOKEN = 1,\n          POST_TOKEN = 2,\n          POST_RECORD = 4;\n\n      var QUOTE = '\\\"',\n             CR = '\\r',\n             LF = '\\n';\n\n      var records = [];\n      var offset = 0;\n      var currentRecord = null;\n      var currentChar;\n\n      var recordBegin = function () {\n        state.escaped = false;\n        currentRecord = [];\n        tokenBegin();\n      };\n\n      var recordEnd = function () {\n        state.currentState = POST_RECORD;\n        records.push(currentRecord);\n        currentRecord = null;\n      };\n\n      var tokenBegin = function() {\n        state.currentState = PRE_TOKEN;\n        state.token = '';\n      };\n\n      var tokenEnd = function() {\n        currentRecord.push(state.token);\n        tokenBegin();\n      };\n\n      while(true) {\n        currentChar = resp[offset++];\n\n        // EOF\n        if(currentChar == null) {\n          if (state.escaped) {\n            throw new Error('Unclosed quote in file.');\n          }\n          if (currentRecord){\n            tokenEnd();\n            recordEnd();\n            break;\n          }\n        }\n        if(currentRecord === null) {\n          recordBegin();\n        }\n\n        // Handle opening quote\n        if (state.currentState === PRE_TOKEN) {\n          if (currentChar === QUOTE) {\n            state.escaped = true;\n            state.currentState = MID_TOKEN;\n            continue;\n          }\n          state.currentState = MID_TOKEN;\n        }\n\n        // mid-token and escaped, look for sequences and end quote\n        if (state.currentState === MID_TOKEN && state.escaped) {\n          if (currentChar === QUOTE) {\n            if (resp[offset] === QUOTE) {\n              state.token += QUOTE;\n              offset++;\n            }\n            else {\n              state.escaped = false;\n              state.currentState = POST_TOKEN;\n            }\n          }\n          else {\n            state.token += currentChar;\n          }\n          continue;\n        }\n\n\n        // fall-through: mid-token or post-token, not escaped\n        if (currentChar === CR ) {\n          if( resp[offset] === LF  ) {\n            offset++;\n          }\n          tokenEnd();\n          recordEnd();\n        }\n        else if (currentChar === LF) {\n          tokenEnd();\n          recordEnd();\n        }\n        else if (currentChar === sep) {\n          tokenEnd();\n        }\n        else if( state.currentState === MID_TOKEN ){\n          state.token += currentChar;\n        }\n      }\n\n      // set up column names\n      if (header) {\n        t.columns = records.shift();\n      }\n      else {\n        for (i = 0; i < records.length; i++){\n          t.columns[i] = i.toString();\n        }\n      }\n      var row;\n      for (i =0; i<records.length; i++) {\n        //Handles row of 'undefined' at end of some CSVs\n        if (i === records.length - 1 && records[i].length === 1) {\n          if(records[i][0] === 'undefined'){\n            break;\n          }\n        }\n        row = new p5.TableRow();\n        row.arr = records[i];\n        row.obj = makeObject(records[i], t.columns);\n        t.addRow(row);\n      }\n      if (callback !== null) {\n        callback(t);\n      }\n    })\n    .fail(function(err,msg){\n      p5._friendlyFileLoadError(2,path);\n      if (typeof callback !== 'undefined') {\n        callback(false);\n      }\n    });\n\n  return t;\n};\n\n// helper function to turn a row into a JSON object\nfunction makeObject(row, headers) {\n  var ret = {};\n  headers = headers || [];\n  if (typeof(headers) === 'undefined'){\n    for (var j = 0; j < row.length; j++ ){\n      headers[j.toString()] = j;\n    }\n  }\n  for (var i = 0; i < headers.length; i++){\n    var key = headers[i];\n    var val = row[i];\n    ret[key] = val;\n  }\n  return ret;\n}\n\n/**\n * Reads the contents of a file and creates an XML object with its values.\n * If the name of the file is used as the parameter, as in the above example,\n * the file must be located in the sketch directory/folder.\n *\n * Alternatively, the file maybe be loaded from anywhere on the local\n * computer using an absolute path (something that starts with / on Unix and\n * Linux, or a drive letter on Windows), or the filename parameter can be a\n * URL for a file found on a network.\n *\n * This method is asynchronous, meaning it may not finish before the next\n * line in your sketch is executed. Calling loadXML() inside preload()\n * guarantees to complete the operation before setup() and draw() are called.\n * Outside preload(), you may supply a callback function to handle the object.\n *\n * @method loadXML\n * @param  {String}   filename   name of the file or URL to load\n * @param  {Function} [callback] function to be executed after loadXML()\n *                               completes, XML object is passed in as\n *                               first argument\n * @return {Object}              XML object containing data\n */\np5.prototype.loadXML = function(path, callback) {\n  var ret = document.implementation.createDocument(null, null);\n  reqwest({\n    url: path,\n    type: 'xml',\n    crossOrigin: true,\n    error: function(err){\n      p5._friendlyFileLoadError(1,path);\n    }\n  })\n    .then(function(resp){\n      var x = resp.documentElement;\n      ret.appendChild(x);\n      if (typeof callback !== 'undefined') {\n        callback(resp);\n      }\n    });\n  return ret;\n};\n\n// name clash with window.open\n// p5.prototype.open = function() {\n//   // TODO\n\n// };\n\np5.prototype.parseXML = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.prototype.selectFolder = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.prototype.selectInput = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\n/**\n * Method for executing an HTTP GET request. If data type is not specified,\n * p5 will try to guess based on the URL, defaulting to text.\n *\n * @method httpGet\n * @param  {String}        path       name of the file or url to load\n * @param  {Object}        [data]     param data passed sent with request\n * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\"\n * @param  {Function}      [callback] function to be executed after\n *                                    httpGet() completes, data is passed in\n *                                    as first argument\n */\np5.prototype.httpGet = function () {\n  var args = Array.prototype.slice.call(arguments);\n  args.push('GET');\n  p5.prototype.httpDo.apply(this, args);\n};\n\n\n/**\n * Method for executing an HTTP POST request. If data type is not specified,\n * p5 will try to guess based on the URL, defaulting to text.\n *\n * @method httpPost\n * @param  {String}        path       name of the file or url to load\n * @param  {Object}        [data]     param data passed sent with request\n * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\"\n * @param  {Function}      [callback] function to be executed after\n *                                    httpGet() completes, data is passed in\n *                                    as first argument\n */\np5.prototype.httpPost = function () {\n  var args = Array.prototype.slice.call(arguments);\n  args.push('POST');\n  p5.prototype.httpDo.apply(this, args);\n};\n\n/**\n * Method for executing an HTTP request. If data type is not specified,\n * p5 will try to guess based on the URL, defaulting to text.\n *\n * @method httpDo\n * @param  {String}        path       name of the file or url to load\n * @param  {String}        [method]   either \"GET\", \"POST\", or \"PUT\",\n *                                    defaults to \"GET\"\n * @param  {Object}        [data]     param data passed sent with request\n * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\"\n * @param  {Function}      [callback] function to be executed after\n *                                    httpGet() completes, data is passed in\n *                                    as first argument\n */\np5.prototype.httpDo = function() {\n  var method = 'GET';\n  var path = arguments[0];\n  var data = {};\n  var type = '';\n  var callback;\n\n  for (var i=1; i<arguments.length; i++) {\n    var a = arguments[i];\n    if (typeof a === 'string') {\n      if (a === 'GET' || a === 'POST' || a === 'PUT') {\n        method = a;\n      } else {\n        type = a;\n      }\n    } else if (typeof a === 'object') {\n      data = a;\n    } else if (typeof a === 'function') {\n      callback = a;\n    }\n  }\n\n  // do some sort of smart type checking\n  if (type === '') {\n    if (path.indexOf('json') !== -1) {\n      type = 'json';\n    } else if (path.indexOf('xml') !== -1) {\n      type = 'xml';\n    } else {\n      type = 'text';\n    }\n  }\n\n  reqwest({\n    url: path,\n    method: method,\n    data: data,\n    type: type,\n    crossOrigin: true,\n    success: function (resp) {\n      if (typeof callback !== 'undefined') {\n        if (type === 'text') {\n          callback(resp.response);\n        } else {\n          callback(resp);\n        }\n      }\n    }\n  });\n};\n\n\n/**\n * @module IO\n * @submodule Output\n * @for p5\n */\n\nwindow.URL = window.URL || window.webkitURL;\n\n// private array of p5.PrintWriter objects\np5.prototype._pWriters = [];\n\np5.prototype.beginRaw = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.prototype.beginRecord = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.prototype.createOutput = function() {\n  // TODO\n\n  throw 'not yet implemented';\n};\n\np5.prototype.createWriter  = function(name, extension) {\n  var newPW;\n  // check that it doesn't already exist\n  for (var i in p5.prototype._pWriters) {\n    if (p5.prototype._pWriters[i].name === name) {\n      // if a p5.PrintWriter w/ this name already exists...\n      // return p5.prototype._pWriters[i]; // return it w/ contents intact.\n      // or, could return a new, empty one with a unique name:\n      newPW = new p5.PrintWriter(name + window.millis(), extension);\n      p5.prototype._pWriters.push( newPW );\n      return newPW;\n    }\n  }\n  newPW = new p5.PrintWriter(name, extension);\n  p5.prototype._pWriters.push( newPW );\n  return newPW;\n};\n\np5.prototype.endRaw = function() {\n  // TODO\n\n  throw 'not yet implemented';\n};\n\np5.prototype.endRecord  = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.PrintWriter = function(filename, extension) {\n  var self = this;\n  this.name = filename;\n  this.content = '';\n  this.print = function(data) { this.content += data; };\n  this.println = function(data) { this.content += data + '\\n'; };\n  this.flush = function() { this.content = ''; };\n  this.close = function() {\n    // convert String to Array for the writeFile Blob\n    var arr = [];\n    arr.push(this.content);\n    p5.prototype.writeFile(arr, filename, extension);\n    // remove from _pWriters array and delete self\n    for (var i in p5.prototype._pWriters) {\n      if (p5.prototype._pWriters[i].name === this.name) {\n        // remove from _pWriters array\n        p5.prototype._pWriters.splice(i, 1);\n      }\n    }\n    self.flush();\n    self = {};\n  };\n};\n\np5.prototype.saveBytes = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\n// object, filename, options --> saveJSON, saveStrings, saveTable\n// filename, [extension] [canvas] --> saveImage\n\n/**\n *  <p>Save an image, text, json, csv, wav, or html. Prompts download to\n *  the client's computer. <b>Note that it is not recommended to call save()\n *  within draw if it's looping, as the save() function will open a new save\n *  dialog every frame.</b></p>\n *  <p>The default behavior is to save the canvas as an image. You can\n *  optionally specify a filename.\n *  For example:</p>\n *  <pre class='language-javascript'><code>\n *  save();\n *  save('myCanvas.jpg'); // save a specific canvas with a filename\n *  </code></pre>\n *\n *  <p>Alternately, the first parameter can be a pointer to a canvas\n *  p5.Element, an Array of Strings,\n *  an Array of JSON, a JSON object, a p5.Table, a p5.Image, or a\n *  p5.SoundFile (requires p5.sound). The second parameter is a filename\n *  (including extension). The third parameter is for options specific\n *  to this type of object. This method will save a file that fits the\n *  given paramaters. For example:</p>\n *\n *  <pre class='language-javascript'><code>\n *\n *  save('myCanvas.jpg');           // Saves canvas as an image\n *\n *  var cnv = createCanvas(100, 100);\n *  save(cnv, 'myCanvas.jpg');      // Saves canvas as an image\n *\n *  var gb = createGraphics(100, 100);\n *  save(gb, 'myGraphics.jpg');      // Saves p5.Renderer object as an image\n *\n *  save(myTable, 'myTable.html');  // Saves table as html file\n *  save(myTable, 'myTable.csv',);  // Comma Separated Values\n *  save(myTable, 'myTable.tsv');   // Tab Separated Values\n *\n *  save(myJSON, 'my.json');        // Saves pretty JSON\n *  save(myJSON, 'my.json', true);  // Optimizes JSON filesize\n *\n *  save(img, 'my.png');            // Saves pImage as a png image\n *\n *  save(arrayOfStrings, 'my.txt'); // Saves strings to a text file with line\n *                                  // breaks after each item in the array\n *  </code></pre>\n *\n *  @method save\n *  @param  {[Object|String]} objectOrFilename  If filename is provided, will\n *                                             save canvas as an image with\n *                                             either png or jpg extension\n *                                             depending on the filename.\n *                                             If object is provided, will\n *                                             save depending on the object\n *                                             and filename (see examples\n *                                             above).\n *  @param  {[String]} filename If an object is provided as the first\n *                               parameter, then the second parameter\n *                               indicates the filename,\n *                               and should include an appropriate\n *                               file extension (see examples above).\n *  @param  {[Boolean/String]} options  Additional options depend on\n *                            filetype. For example, when saving JSON,\n *                            <code>true</code> indicates that the\n *                            output will be optimized for filesize,\n *                            rather than readability.\n */\np5.prototype.save = function(object, _filename, _options) {\n  // parse the arguments and figure out which things we are saving\n  var args = arguments;\n  // =================================================\n  // OPTION 1: saveCanvas...\n\n  // if no arguments are provided, save canvas\n  var cnv = this._curElement.elt;\n  if (args.length === 0) {\n    p5.prototype.saveCanvas(cnv);\n    return;\n  }\n  // otherwise, parse the arguments\n\n  // if first param is a p5Graphics, then saveCanvas\n  else if (args[0] instanceof p5.Renderer) {\n    p5.prototype.saveCanvas(args[0].elt, args[1], args[2]);\n    return;\n  }\n\n  // if 1st param is String and only one arg, assume it is canvas filename\n  else if (args.length === 1 && typeof(args[0]) === 'string') {\n    p5.prototype.saveCanvas(cnv, args[0]);\n  }\n\n  // =================================================\n  // OPTION 2: extension clarifies saveStrings vs. saveJSON\n\n  else {\n    var extension = _checkFileExtension(args[1], args[2])[1];\n    switch(extension){\n    case 'json':\n      p5.prototype.saveJSON(args[0], args[1], args[2]);\n      return;\n    case 'txt':\n      p5.prototype.saveStrings(args[0], args[1], args[2]);\n      return;\n    // =================================================\n    // OPTION 3: decide based on object...\n    default:\n      if (args[0] instanceof Array) {\n        p5.prototype.saveStrings(args[0], args[1], args[2]);\n      }\n      else if (args[0] instanceof p5.Table) {\n        p5.prototype.saveTable(args[0], args[1], args[2], args[3]);\n      }\n      else if (args[0] instanceof p5.Image) {\n        p5.prototype.saveCanvas(args[0].canvas, args[1]);\n      }\n      else if (args[0] instanceof p5.SoundFile) {\n        p5.prototype.saveSound(args[0], args[1], args[2], args[3]);\n      }\n    }\n  }\n};\n\n/**\n *  Writes the contents of an Array or a JSON object to a .json file.\n *  The file saving process and location of the saved file will\n *  vary between web browsers.\n *\n *  @method saveJSON\n *  @param  {Array|Object} json\n *  @param  {String} filename\n *  @param  {Boolean} [optimize]   If true, removes line breaks\n *                                 and spaces from the output\n *                                 file to optimize filesize\n *                                 (but not readability).\n *  @example\n *  <div><code>\n *  var json;\n *\n *  function setup() {\n *\n *    json = {}; // new JSON Object\n *\n *    json.id = 0;\n *    json.species = 'Panthera leo';\n *    json.name = 'Lion';\n *\n *  // To save, un-comment the line below, then click 'run'\n *  // saveJSONObject(json, 'lion.json');\n *  }\n *\n *  // Saves the following to a file called \"lion.json\":\n *  // {\n *  //   \"id\": 0,\n *  //   \"species\": \"Panthera leo\",\n *  //   \"name\": \"Lion\"\n *  // }\n *  </div></code>\n */\np5.prototype.saveJSON = function(json, filename, opt) {\n  var stringify;\n  if (opt){\n    stringify = JSON.stringify( json );\n  } else {\n    stringify = JSON.stringify( json, undefined, 2);\n  }\n  console.log(stringify);\n  this.saveStrings(stringify.split('\\n'), filename, 'json');\n};\n\np5.prototype.saveJSONObject = p5.prototype.saveJSON;\np5.prototype.saveJSONArray = p5.prototype.saveJSON;\n\np5.prototype.saveStream = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\n/**\n *  Writes an array of Strings to a text file, one line per String.\n *  The file saving process and location of the saved file will\n *  vary between web browsers.\n *\n *  @method saveStrings\n *  @param  {Array} list      string array to be written\n *  @param  {String} filename filename for output\n *  @example\n *  <div><code>\n *  var words = 'apple bear cat dog';\n *\n *  // .split() outputs an Array\n *  var list = split(words, ' ');\n *\n *  // To save the file, un-comment next line and click 'run'\n *  // saveStrings(list, 'nouns.txt');\n *\n *  // Saves the following to a file called 'nouns.txt':\n *  //\n *  // apple\n *  // bear\n *  // cat\n *  // dog\n *  </code></div>\n */\np5.prototype.saveStrings = function(list, filename, extension) {\n  var ext = extension || 'txt';\n  var pWriter = this.createWriter(filename, ext);\n  for (var i in list) {\n    if (i < list.length - 1) {\n      pWriter.println(list[i]);\n    } else {\n      pWriter.print(list[i]);\n    }\n  }\n  pWriter.close();\n  pWriter.flush();\n};\n\np5.prototype.saveXML = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\np5.prototype.selectOutput = function() {\n  // TODO\n  throw 'not yet implemented';\n\n};\n\n// =======\n// HELPERS\n// =======\n\nfunction escapeHelper(content) {\n  return content\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n *  Writes the contents of a Table object to a file. Defaults to a\n *  text file with comma-separated-values ('csv') but can also\n *  use tab separation ('tsv'), or generate an HTML table ('html').\n *  The file saving process and location of the saved file will\n *  vary between web browsers.\n *\n *  @method saveTable\n *  @param  {p5.Table} Table  the Table object to save to a file\n *  @param  {String} filename the filename to which the Table should be saved\n *  @param  {[String]} options  can be one of \"tsv\", \"csv\", or \"html\"\n *  @example\n *  <div><code>\n *  var table;\n *\n *  function setup() {\n *    table = new p5.Table();\n *\n *    table.addColumn('id');\n *    table.addColumn('species');\n *    table.addColumn('name');\n *\n *    var newRow = table.addRow();\n *    newRow.setNum('id', table.getRowCount() - 1);\n *    newRow.setString('species', 'Panthera leo');\n *    newRow.setString('name', 'Lion');\n *\n *    // To save, un-comment next line then click 'run'\n *    // saveTable(table, 'new.csv');\n *    }\n *\n *    // Saves the following to a file called 'new.csv':\n *    // id,species,name\n *    // 0,Panthera leo,Lion\n *  </code></div>\n */\np5.prototype.saveTable = function(table, filename, options) {\n  var pWriter = this.createWriter(filename, options);\n\n  var header = table.columns;\n\n  var sep = ','; // default to CSV\n  if (options === 'tsv') {\n    sep = '\\t';\n  }\n  if (options !== 'html') {\n    // make header if it has values\n    if (header[0] !== '0') {\n      for (var h = 0; h < header.length; h++ ) {\n        if (h < header.length - 1){\n          pWriter.print(header[h] + sep);\n        } else {\n          pWriter.println(header[h]);\n        }\n      }\n    }\n\n    // make rows\n    for (var i = 0; i < table.rows.length; i++ ) {\n      var j;\n      for (j = 0; j < table.rows[i].arr.length; j++) {\n        if (j < table.rows[i].arr.length - 1) {\n          pWriter.print(table.rows[i].arr[j] + sep);\n        }\n        else if (i < table.rows.length - 1) {\n          pWriter.println(table.rows[i].arr[j]);\n        } else {\n          pWriter.print(table.rows[i].arr[j]); // no line break\n        }\n      }\n    }\n  }\n\n  // otherwise, make HTML\n  else {\n    pWriter.println('<html>');\n    pWriter.println('<head>');\n    var str = '  <meta http-equiv=\\\"content-type\\\" content';\n    str += '=\\\"text/html;charset=utf-8\\\" />';\n    pWriter.println(str);\n    pWriter.println('</head>');\n\n    pWriter.println('<body>');\n    pWriter.println('  <table>');\n\n    // make header if it has values\n    if (header[0] !== '0') {\n      pWriter.println('    <tr>');\n      for (var k = 0; k < header.length; k++ ) {\n        var e = escapeHelper(header[k]);\n        pWriter.println('      <td>' +e);\n        pWriter.println('      </td>');\n      }\n      pWriter.println('    </tr>');\n    }\n\n    // make rows\n    for (var row = 0; row < table.rows.length; row++) {\n      pWriter.println('    <tr>');\n      for (var col = 0; col < table.columns.length; col++) {\n        var entry = table.rows[row].getString(col);\n        var htmlEntry = escapeHelper(entry);\n        pWriter.println('      <td>' +htmlEntry);\n        pWriter.println('      </td>');\n      }\n      pWriter.println('    </tr>');\n    }\n    pWriter.println('  </table>');\n    pWriter.println('</body>');\n    pWriter.print('</html>');\n  }\n  // close and flush the pWriter\n  pWriter.close();\n  pWriter.flush();\n}; // end saveTable()\n\n/**\n *  Generate a blob of file data as a url to prepare for download.\n *  Accepts an array of data, a filename, and an extension (optional).\n *  This is a private function because it does not do any formatting,\n *  but it is used by saveStrings, saveJSON, saveTable etc.\n *\n *  @param  {Array} dataToDownload\n *  @param  {String} filename\n *  @param  {[String]} extension\n *  @private\n */\np5.prototype.writeFile = function(dataToDownload, filename, extension) {\n  var type = 'application\\/octet-stream';\n  if (p5.prototype._isSafari() ) {\n    type = 'text\\/plain';\n  }\n  var blob = new Blob(dataToDownload, {'type': type});\n  var href = window.URL.createObjectURL(blob);\n  p5.prototype.downloadFile(href, filename, extension);\n};\n\n/**\n *  Forces download. Accepts a url to filedata/blob, a filename,\n *  and an extension (optional).\n *  This is a private function because it does not do any formatting,\n *  but it is used by saveStrings, saveJSON, saveTable etc.\n *\n *  @param  {String} href      i.e. an href generated by createObjectURL\n *  @param  {[String]} filename\n *  @param  {[String]} extension\n */\np5.prototype.downloadFile = function(href, fName, extension) {\n  var fx = _checkFileExtension(fName, extension);\n  var filename = fx[0];\n  var ext = fx[1];\n\n  var a = document.createElement('a');\n  a.href = href;\n  a.download = filename;\n\n  // Firefox requires the link to be added to the DOM before click()\n  a.onclick = destroyClickedElement;\n  a.style.display = 'none';\n  document.body.appendChild(a);\n\n  // Safari will open this file in the same page as a confusing Blob.\n  if (p5.prototype._isSafari() ) {\n    var aText = 'Hello, Safari user! To download this file...\\n';\n    aText += '1. Go to File --> Save As.\\n';\n    aText += '2. Choose \"Page Source\" as the Format.\\n';\n    aText += '3. Name it with this extension: .\\\"' + ext+'\\\"';\n    alert(aText);\n  }\n  a.click();\n  href = null;\n};\n\n/**\n *  Returns a file extension, or another string\n *  if the provided parameter has no extension.\n *\n *  @param   {String} filename\n *  @return  {Array} [fileName, fileExtension]\n *\n *  @private\n */\nfunction _checkFileExtension(filename, extension) {\n  if (!extension || extension === true || extension === 'true') {\n    extension = '';\n  }\n  if (!filename) {\n    filename = 'untitled';\n  }\n  var ext = '';\n  // make sure the file will have a name, see if filename needs extension\n  if (filename && filename.indexOf('.') > -1) {\n    ext = filename.split('.').pop();\n  }\n  // append extension if it doesn't exist\n  if (extension) {\n    if (ext !== extension) {\n      ext = extension;\n      filename = filename + '.' + ext;\n    }\n  }\n  return [filename, ext];\n}\np5.prototype._checkFileExtension = _checkFileExtension;\n\n/**\n *  Returns true if the browser is Safari, false if not.\n *  Safari makes trouble for downloading files.\n *\n *  @return  {Boolean} [description]\n *  @private\n */\np5.prototype._isSafari = function() {\n  var x = Object.prototype.toString.call(window.HTMLElement);\n  return x.indexOf('Constructor') > 0;\n};\n\n/**\n *  Helper function, a callback for download that deletes\n *  an invisible anchor element from the DOM once the file\n *  has been automatically downloaded.\n *\n *  @private\n */\nfunction destroyClickedElement(event) {\n  document.body.removeChild(event.target);\n}\n\nmodule.exports = p5;\n","blocklyXml":"","type":"","typeConfig":{"subjectPrefix":"","triggers":{"context":[],"external":[{"configuration":{"keys":[""],"modifiers":["",""]},"externalType":""}],"lifecycle":[],"services":[]}},"anchors":[],"usesfields":[],"usesFlows":[],"usesTables":[],"compatibleVersion":"","hideFromUser":false,"precompile":false,"restoreFocus":false,"isMandatory":false,"autocompleteSnippets":false,"autocompleteTypes":false,"debuggerEnabled":false,"hideInFlowLaunchMenu":false,"icon":"","version":""}}]}}